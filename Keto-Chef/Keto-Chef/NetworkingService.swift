//
//  NetworkingService.swift
//  Keto-Chef
//
//  Created by Ricardo Rodriguez on 3/20/19.
//  Copyright Â© 2019 Ricardo Rodriguez. All rights reserved.
//

import Foundation
import Firebase
import FirebaseDatabase

class NetworkingService {
    
    func saveRecipe(recipe: Recipe) {
        //Getting the reference to the database
        var ref: DatabaseReference!
        ref = Database.database().reference()
        
        // Getting an autogenerated ID, this will be super useful to handle unique items every time and Firebase takes care of it.
        let key = ref.child("recipes").childByAutoId().key
        
        // Saving the data we'll send in a dictionary
        let newItem: [String: Any] = ["name": recipe.recipeName,
                       "description": recipe.recipeDescription,
                       "ingredients": recipe.recipeIngredients,
                       "directions": recipe.recipeDirections]
        
        // Method from Firebase library that creates a new entry.
        ref.child("recipes").child(key!).setValue(newItem)

    }

    
    func getRecipes(completion: @escaping ([Recipe]) -> Void ) {
        var recipesList: [Recipe] = []
        
        var ref: DatabaseReference!
        ref = Database.database().reference().child("recipes")
        ref.observe(DataEventType.value, with: { (snapshot) in
            let postDict = snapshot.value as? [String : Any] ?? [:]
            for rest in postDict{
                guard let restDict = rest.value as? [String: Any ] else { continue }
                guard let name = restDict["name"],
                    let description = restDict["description"],
                    let ingredients = restDict["ingredients"],
                    let directions = restDict["directions"] else { return }

                let recipe = Recipe(name: name as! String, description: description as! String, ingredients: ingredients as! [String], directions: directions as! [String])
                print("this is a recipe \(recipe)")
                recipesList.append(recipe)
                
            }
            completion(recipesList)
        })
        
    }
    
    
}
